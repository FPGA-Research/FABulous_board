#include <Wire.h>
#include "register_config.h"

#define I2C_ADDRESS 0x60  // Replace with actual I2C address of your device
#define SDA_PIN 21        // Set SDA pin (use correct pins for your ESP32)
#define SCL_PIN 22        // Set SCL pin

/*Register config_registers[] = {
    {2, 0x53},   {3, 0x00},   {4, 0x20},   {7, 0x00},   {15, 0x00},
    {16, 0x0F},  {17, 0x0F},  {18, 0x0F},  {19, 0x8C},  {20, 0x8C},
    {21, 0x8C},  {22, 0x8C},  {23, 0x8C},  {26, 0x00},  {27, 0x01},
    {28, 0x00},  {29, 0x10},  {30, 0x00},  {31, 0x00},  {32, 0x00},
    {33, 0x00},  {42, 0x00},  {43, 0x01},  {44, 0x00},  {45, 0x2B},
    {46, 0x00},  {47, 0x00},  {48, 0x00},  {49, 0x00},  {50, 0x00},
    {51, 0x01},  {52, 0x00},  {53, 0xDF},  {54, 0x00},  {55, 0x00},
    {56, 0x00},  {57, 0x00},  {58, 0x00},  {59, 0x01},  {60, 0x00},
    {61, 0x14},  {62, 0x80},  {63, 0x00},  {64, 0x00},  {65, 0x00},
    {90, 0x00},  {91, 0x00},  {149, 0x00}, {150, 0x00}, {151, 0x00},
    {152, 0x00}, {153, 0x00}, {154, 0x00}, {155, 0x00}, {162, 0x00},
    {163, 0x00}, {164, 0x00}, {165, 0x00}, {166, 0x00}, {167, 0x00},
    {183, 0xD2},
};*/

// 48 8 24
/*Register config_registers[] =
{
          {0x0002, 0x53}, {0x0003, 0x00}, {0x0004, 0x20}, {0x0007, 0x00},
        {0x000F, 0x00}, {0x0010, 0x0F}, {0x0011, 0x0F}, {0x0012, 0x0F},
        {0x0013, 0x8C}, {0x0014, 0x8C}, {0x0015, 0x8C}, {0x0016, 0x8C},
        {0x0017, 0x8C}, {0x001A, 0x00}, {0x001B, 0x01}, {0x001C, 0x00},
        {0x001D, 0x10}, {0x001E, 0x00}, {0x001F, 0x00}, {0x0020, 0x00},
        {0x0021, 0x00}, {0x002A, 0x00}, {0x002B, 0x04}, {0x002C, 0x00},
        {0x002D, 0x07}, {0x002E, 0x60}, {0x002F, 0x00}, {0x0030, 0x00},
        {0x0031, 0x00}, {0x0032, 0x00}, {0x0033, 0x02}, {0x0034, 0x00},
        {0x0035, 0x36}, {0x0036, 0x40}, {0x0037, 0x00}, {0x0038, 0x00},
        {0x0039, 0x00}, {0x003A, 0x00}, {0x003B, 0x02}, {0x003C, 0x00},
        {0x003D, 0x10}, {0x003E, 0xC0}, {0x003F, 0x00}, {0x0040, 0x00},
        {0x0041, 0x00}, {0x005A, 0x00}, {0x005B, 0x00}, {0x0095, 0x00},
        {0x0096, 0x00}, {0x0097, 0x00}, {0x0098, 0x00}, {0x0099, 0x00},
        {0x009A, 0x00}, {0x009B, 0x00}, {0x00A2, 0x00}, {0x00A3, 0x00},
        {0x00A4, 0x00}, {0x00A5, 0x00}, {0x00A6, 0x00}, {0x00A7, 0x00},
        {0x00B7, 0xD2}
        
};*/


Register config_registers[] = {
  { 0x0002, 0x53 },
  { 0x0003, 0x00 },
  { 0x0004, 0x20 },
  { 0x0007, 0x00 },
  { 0x000F, 0x00 },
  { 0x0010, 0x0F },
  { 0x0011, 0x0F },
  { 0x0012, 0x0F },
  { 0x0013, 0x8C },
  { 0x0014, 0x8C },
  { 0x0015, 0x8C },
  { 0x0016, 0x8C },
  { 0x0017, 0x8C },
  { 0x001A, 0x00 },
  { 0x001B, 0x01 },
  { 0x001C, 0x00 },
  { 0x001D, 0x10 },
  { 0x001E, 0x00 },
  { 0x001F, 0x00 },
  { 0x0020, 0x00 },
  { 0x0021, 0x00 },
  { 0x002A, 0x00 },
  { 0x002B, 0x01 },
  { 0x002C, 0x00 },
  { 0x002D, 0x2B },
  { 0x002E, 0x00 },
  { 0x002F, 0x00 },
  { 0x0030, 0x00 },
  { 0x0031, 0x00 },
  { 0x0032, 0x00 },
  { 0x0033, 0x01 },
  { 0x0034, 0x00 },
  { 0x0035, 0x10 },
  { 0x0036, 0x00 },
  { 0x0037, 0x00 },
  { 0x0038, 0x00 },
  { 0x0039, 0x00 },
  { 0x003A, 0x00 },
  { 0x003B, 0x04 },
  { 0x003C, 0x00 },
  { 0x003D, 0x07 },
  { 0x003E, 0x60 },
  { 0x003F, 0x00 },
  { 0x0040, 0x00 },
  { 0x0041, 0x00 },
  { 0x005A, 0x00 },
  { 0x005B, 0x00 },
  { 0x0095, 0x00 },
  { 0x0096, 0x00 },
  { 0x0097, 0x00 },
  { 0x0098, 0x00 },
  { 0x0099, 0x00 },
  { 0x009A, 0x00 },
  { 0x009B, 0x00 },
  { 0x00A2, 0x00 },
  { 0x00A3, 0x00 },
  { 0x00A4, 0x00 },
  { 0x00A5, 0x00 },
  { 0x00A6, 0x00 },
  { 0x00A7, 0x00 },
  { 0x00B7, 0xD2 },

};

void writeToRegister(uint8_t regAddress, uint8_t value) {
  Wire.beginTransmission(I2C_ADDRESS);
  Wire.write(regAddress);
  Wire.write(value);
  Wire.endTransmission();
}

void burstWrite(uint8_t startAddress, uint8_t* data, size_t length) {
  Wire.beginTransmission(I2C_ADDRESS);
  Wire.write(startAddress);
  for (size_t i = 0; i < length; i++) {
    Wire.write(data[i]);
  }
  Wire.endTransmission();
}

void setup() {
  Wire.begin(SDA_PIN, SCL_PIN);  // Initialize I2C

  // Disable outputs
  writeToRegister(REGISTER_OUTPUT_ENABLE, 0xFF);

  // Power down all output drivers (burst write from REGISTER_CLK0_CONTROL to register 23)
  uint8_t powerDownData[7] = { 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 };
  burstWrite(REGISTER_CLK0_CONTROL, powerDownData, 7);

  // Set interrupt masks (write to the first register in the config)
  writeToRegister(config_registers[0].address, config_registers[0].value);

  // Write config to the registers starting after register 3
  for (size_t i = 2; i < REGISTER_COUNT; i++) {
    writeToRegister(config_registers[i].address, config_registers[i].value);
  }

  // Apply PLLA and PLLB soft reset
  writeToRegister(REGISTER_PLL_RESET, 0xAC);

  // Enable outputs for CLK0, CLK1, and CLK2 (write to the second register in the config)
  writeToRegister(config_registers[1].address, config_registers[1].value);
}

void loop() {
  // Nothing in the loop for this example
}
